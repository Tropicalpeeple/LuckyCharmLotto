{"version":3,"sources":["helpers/utilities.ts","helpers/api.ts","features/walletConnectSlice.ts","features/applicationSlice.ts","store/hooks.ts","store/connector.ts","components/SiteHeader/index.tsx","components/Icon.tsx","components/ASAIcon.tsx","assets/algo.svg","components/AssetRow.tsx","components/AccountAssets.tsx","components/LoadingIcon.tsx","components/SiteBody/index.tsx","assets/algorandwallet.svg","App.tsx","reportWebVitals.js","features/logger.ts","store/index.ts","index.tsx"],"names":["ellipseAddress","address","width","slice","formatBigNumWithDecimals","num","decimals","singleUnit","BigInt","repeat","fractionalUnits","toString","padStart","ChainType","mainNetClient","algosdk","Algodv2","testNetClient","clientForChain","chain","MainNet","TestNet","Error","apiGetAccountAssets","a","client","accountInformation","setIntDecoding","IntDecoding","BIGINT","do","accountInfo","algoBalance","amount","assetsFromRes","assets","map","id","frozen","Number","creator","sort","b","Promise","all","asset","i","resolve","setTimeout","getAssetByID","params","name","unitName","url","console","error","message","unshift","initialState","accounts","fetching","getAccountAssets","createAsyncThunk","walletConnectSlice","createSlice","reducers","switchChain","state","action","payload","reset","onSessionUpdate","extraReducers","builder","addCase","fulfilled","pending","selectAssets","createSelector","walletConnect","actions","applicationSlice","isModalOpen","setIsModalOpen","useAppDispatch","useDispatch","useAppSelector","useSelector","connectProps","bridge","qrcodeModal","QRCodeModal","connector","WalletConnect","ConnectContext","createContext","SiteHeader","loading","dispatch","useContext","useEffect","connected","log","on","off","length","nativeCurrency","find","className","Select","value","onChange","event","target","Button","onClick","killSession","catch","err","Icon","props","src","fallback","alt","onError","defaultProps","size","ASAIcon","assetID","AssetRow","algo","AccountAssets","tokens","filter","token","LoadingIcon","SiteBody","App","application","connect","open","uri","createSession","href","rel","Dialog","isShown","title","hasFooter","onCloseComplete","algowallet","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","logger","getState","next","type","result","store","configureStore","reducer","walletConnectReducer","applicationReducer","preloadedState","middleware","getDefaultMiddleware","concat","ReactDOM","render","StrictMode","Provider","document","getElementById"],"mappings":"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","file":"static/js/main.4154750f.chunk.js","sourcesContent":["export function capitalize(string: string): string {\n    return string\n      .split(\" \")\n      .map(word => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase())\n      .join(\" \");\n  }\n  \n  export function ellipseText(text = \"\", maxLength = 9999): string {\n    if (text.length <= maxLength) {\n      return text;\n    }\n    const _maxLength = maxLength - 3;\n    let ellipse = false;\n    let currentLength = 0;\n    const result =\n      text\n        .split(\" \")\n        .filter(word => {\n          currentLength += word.length;\n          if (ellipse || currentLength >= _maxLength) {\n            ellipse = true;\n            return false;\n          } else {\n            return true;\n          }\n        })\n        .join(\" \") + \"...\";\n    return result;\n  }\n  \n  export function ellipseAddress(address = \"\", width = 6): string {\n    return `${address.slice(0, width)}...${address.slice(-width)}`;\n  }\n  \n  export function padLeft(n: string, width: number, z?: string): string {\n    z = z || \"0\";\n    n = n + \"\";\n    return n.length >= width ? n : new Array(width - n.length + 1).join(z) + n;\n  }\n  \n  export function sanitizeHex(hex: string): string {\n    hex = hex.substring(0, 2) === \"0x\" ? hex.substring(2) : hex;\n    if (hex === \"\") {\n      return \"\";\n    }\n    hex = hex.length % 2 !== 0 ? \"0\" + hex : hex;\n    return \"0x\" + hex;\n  }\n  \n  export function removeHexPrefix(hex: string): string {\n    return hex.toLowerCase().replace(\"0x\", \"\");\n  }\n  \n  export function getDataString(func: string, arrVals: any[]): string {\n    let val = \"\";\n    for (let i = 0; i < arrVals.length; i++) {\n      val += padLeft(arrVals[i], 64);\n    }\n    const data = func + val;\n    return data;\n  }\n  \n  export function isMobile(): boolean {\n    let mobile = false;\n  \n    function hasTouchEvent(): boolean {\n      try {\n        document.createEvent(\"TouchEvent\");\n        return true;\n      } catch (e) {\n        return false;\n      }\n    }\n  \n    function hasMobileUserAgent(): boolean {\n      if (\n        /(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|ipad|iris|kindle|Android|Silk|lge |maemo|midp|mmp|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows (ce|phone)|xda|xiino/i.test(\n          navigator.userAgent,\n        ) ||\n        /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw-(n|u)|c55\\/|capi|ccwa|cdm-|cell|chtm|cldc|cmd-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc-s|devi|dica|dmob|do(c|p)o|ds(12|-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(-|_)|g1 u|g560|gene|gf-5|g-mo|go(.w|od)|gr(ad|un)|haie|hcit|hd-(m|p|t)|hei-|hi(pt|ta)|hp( i|ip)|hs-c|ht(c(-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i-(20|go|ma)|i230|iac( |-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|-[a-w])|libw|lynx|m1-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|-([1-8]|c))|phil|pire|pl(ay|uc)|pn-2|po(ck|rt|se)|prox|psio|pt-g|qa-a|qc(07|12|21|32|60|-[2-7]|i-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h-|oo|p-)|sdk\\/|se(c(-|0|1)|47|mc|nd|ri)|sgh-|shar|sie(-|m)|sk-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h-|v-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl-|tdg-|tel(i|m)|tim-|t-mo|to(pl|sh)|ts(70|-|m3|m5)|tx-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas-|your|zeto|zte-/i.test(\n          navigator.userAgent.substr(0, 4),\n        )\n      ) {\n        return true;\n      } else if (hasTouchEvent()) {\n        return true;\n      }\n      return false;\n    }\n  \n    mobile = hasMobileUserAgent();\n  \n    return mobile;\n  }\n  \n  export function formatBigNumWithDecimals(num: bigint, decimals: number): string {\n    const singleUnit = BigInt(\"1\" + \"0\".repeat(decimals));\n    const wholeUnits = num / singleUnit;\n    const fractionalUnits = num % singleUnit;\n  \n    return wholeUnits.toString() + \".\" + fractionalUnits.toString().padStart(decimals, \"0\");\n  }\n  ","import algosdk from \"algosdk\";\nimport { IAssetData } from \"./types\";\n\nexport enum ChainType {\n  MainNet = \"mainnet\",\n  TestNet = \"testnet\",\n}\n\nconst mainNetClient = new algosdk.Algodv2(\"\", \"https://mainnet-api.algonode.cloud\", \"\");\nconst testNetClient = new algosdk.Algodv2(\"\", \"https://testnet-api.algonode.cloud\", \"\");\n\nfunction clientForChain(chain: ChainType): algosdk.Algodv2 {\n  switch (chain) {\n    case ChainType.MainNet:\n      return mainNetClient;\n    case ChainType.TestNet:\n      return testNetClient;\n    default:\n      throw new Error(`Unknown chain type: ${chain}`);\n  }\n}\n\nexport async function apiGetAccountAssets(\n  chain: ChainType,\n  address: string,\n): Promise<IAssetData[]> {\n  const client = clientForChain(chain);\n\n  const accountInfo = await client\n    .accountInformation(address)\n    .setIntDecoding(algosdk.IntDecoding.BIGINT)\n    .do();\n\n  const algoBalance = accountInfo.amount.toString();\n  const assetsFromRes: Array<{\n    \"asset-id\": bigint;\n    amount: bigint;\n    \"is-frozen\": boolean;\n  }> = accountInfo.assets;\n\n  const assets: IAssetData[] = assetsFromRes.map(\n    ({ \"asset-id\": id, amount, \"is-frozen\": frozen }) => ({\n      id: Number(id),\n      amount: amount.toString(),\n      frozen,\n      decimals: 0,\n      creator: \"\",\n    }),\n  );\n\n  assets.sort((a, b) => a.id - b.id);\n\n  await Promise.all(\n    assets.map((asset, i) => {\n      return new Promise<void>((resolve) => {\n        setTimeout(async () => {\n          try {\n            const { params } = await client.getAssetByID(asset.id).do();\n            asset.name = params.name;\n            asset.unitName = params[\"unit-name\"];\n            asset.url = params.url;\n            asset.decimals = params.decimals;\n            asset.creator = params.creator;\n          } catch (error) {\n            console.error(\"asset:\", asset.id, error.message);\n          }\n          resolve();\n        }, 25 * i);\n      });\n    }),\n  );\n\n  assets.unshift({\n    id: 0,\n    amount: algoBalance,\n    creator: \"\",\n    frozen: false,\n    decimals: 6,\n    name: \"Algo\",\n    unitName: \"Algo\",\n  });\n\n  return assets;\n}\n\nexport async function apiGetTxnParams(chain: ChainType): Promise<algosdk.SuggestedParams> {\n  const params = await clientForChain(chain).getTransactionParams().do();\n  return params;\n}\n\nexport async function apiSubmitTransactions(\n  chain: ChainType,\n  stxns: Uint8Array[],\n): Promise<number> {\n  const { txId } = await clientForChain(chain).sendRawTransaction(stxns).do();\n  return await waitForTransaction(chain, txId);\n}\n\nasync function waitForTransaction(chain: ChainType, txId: string): Promise<number> {\n  const client = clientForChain(chain);\n\n  let lastStatus = await client.status().do();\n  let lastRound = lastStatus[\"last-round\"];\n  while (true) {\n    const status = await client.pendingTransactionInformation(txId).do();\n    if (status[\"pool-error\"]) {\n      throw new Error(`Transaction Pool Error: ${status[\"pool-error\"]}`);\n    }\n    if (status[\"confirmed-round\"]) {\n      return status[\"confirmed-round\"];\n    }\n    lastStatus = await client.statusAfterBlock(lastRound + 1).do();\n    lastRound = lastStatus[\"last-round\"];\n  }\n}\n","import { createAsyncThunk, createSelector, createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { apiGetAccountAssets, ChainType } from \"../helpers/api\";\nimport { IAssetData } from \"../helpers/types\";\nimport { RootState } from \"../store\";\n\ninterface WalletConnectState {\n  chain: ChainType;\n  accounts: string[];\n  address: string;\n  assets: IAssetData[];\n  fetching: boolean;\n}\n\nconst initialState = {\n  accounts: [],\n  address: \"\",\n  assets: [\n    {\n      id: 0,\n      amount: \"0\",\n      creator: \"\",\n      frozen: false,\n      decimals: 6,\n      name: \"Algo\",\n      unitName: \"Algo\",\n    },\n  ],\n  chain: ChainType.TestNet,\n  fetching: false,\n} as WalletConnectState;\n\nexport const getAccountAssets = createAsyncThunk(\n  \"walletConnect/getAccountAssets\",\n  async ({ chain, address }: { chain: ChainType; address: string }) => {\n    return await apiGetAccountAssets(chain, address);\n  },\n);\n\nexport const walletConnectSlice = createSlice({\n  name: \"walletConnect\",\n  initialState,\n  reducers: {\n    switchChain(state, action: PayloadAction<ChainType>) {\n      state.chain = action.payload;\n    },\n    reset: (state) => ({ ...initialState, chain: state.chain }),\n    onSessionUpdate: (state, action: PayloadAction<string[]>) => {\n      state.accounts = action.payload;\n      state.address = action.payload[0];\n    },\n  },\n  extraReducers(builder) {\n    builder.addCase(getAccountAssets.fulfilled, (state, action) => {\n      state.fetching = false;\n      state.assets = action.payload;\n    });\n    builder.addCase(getAccountAssets.pending, (state) => {\n      state.fetching = true;\n    });\n  },\n});\n\nexport const selectAssets = createSelector(\n  (state: RootState) => state.walletConnect.assets,\n  (assets) => assets.map((a) => ({ ...a, amount: BigInt(a.amount) })),\n);\n\nexport const { switchChain, reset, onSessionUpdate } = walletConnectSlice.actions;\n\nexport default walletConnectSlice.reducer;\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\n\nconst initialState = {\n  isModalOpen: false,\n};\n\nexport const applicationSlice = createSlice({\n  name: \"application\",\n  initialState,\n  reducers: {\n    setIsModalOpen: (state, action: PayloadAction<boolean>) => {\n      state.isModalOpen = action.payload;\n    },\n  },\n});\n\nexport const { setIsModalOpen } = applicationSlice.actions;\n\nexport default applicationSlice.reducer;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from \"react-redux\";\nimport { AppDispatch, RootState } from \".\";\n\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import WalletConnect from \"@walletconnect/client\";\nimport { createContext } from \"react\";\nimport QRCodeModal from \"algorand-walletconnect-qrcode-modal\";\n\nconst connectProps = {\n  bridge: \"https://bridge.walletconnect.org\",\n  qrcodeModal: QRCodeModal,\n};\nexport const connector = new WalletConnect(connectProps);\nexport const ConnectContext = createContext(connector);\n","import React, { useContext, useEffect } from \"react\";\nimport { Button, Select } from \"evergreen-ui\";\nimport { ellipseAddress, formatBigNumWithDecimals } from \"../../helpers/utilities\";\nimport { IAssetData } from \"../../helpers/types\";\nimport {\n  reset,\n  onSessionUpdate,\n  getAccountAssets,\n  switchChain,\n  selectAssets,\n} from \"../../features/walletConnectSlice\";\nimport { setIsModalOpen } from \"../../features/applicationSlice\";\nimport { ChainType } from \"../../helpers/api\";\nimport { useAppDispatch, useAppSelector } from \"../../store/hooks\";\nimport { ConnectContext } from \"../../store/connector\";\n\nconst SiteHeader: React.FC = () => {\n  const { fetching: loading, address, chain } = useAppSelector((state) => state.walletConnect);\n  const assets = useAppSelector(selectAssets);\n  const dispatch = useAppDispatch();\n  const connector = useContext(ConnectContext);\n\n  useEffect(() => {\n    // Check if connection is already established\n    if (connector.connected) {\n      const { accounts } = connector;\n      dispatch(onSessionUpdate(accounts));\n    }\n\n    // Subscribe to connection events\n    console.log(\"%cin subscribeToEvents\", \"background: yellow\");\n    connector.on(\"connect\", (error, payload) => {\n      console.log(\"%cOn connect\", \"background: yellow\");\n      if (error) {\n        throw error;\n      }\n      const { accounts } = payload.params[0];\n      dispatch(onSessionUpdate(accounts));\n      dispatch(setIsModalOpen(false));\n    });\n\n    connector.on(\"session_update\", (error, payload) => {\n      console.log(\"%cOn session_update\", \"background: yellow\");\n      if (error) {\n        throw error;\n      }\n      const { accounts } = payload.params[0];\n      dispatch(onSessionUpdate(accounts));\n    });\n\n    connector.on(\"disconnect\", (error, payload) => {\n      console.log(\"%cOn disconnect\", \"background: yellow\");\n      if (error) {\n        throw error;\n      }\n      dispatch(reset());\n    });\n\n    return () => {\n      console.log(\"%cin unsubscribeFromEvents\", \"background: yellow\");\n      connector.off(\"connect\");\n      connector.off(\"session_update\");\n      connector.off(\"disconnect\");\n    };\n  }, [dispatch, connector]);\n\n  useEffect(() => {\n    // Retrieve assets info\n    if (address?.length > 0) {\n      console.log(\"chain: \", chain);\n      dispatch(getAccountAssets({ chain, address }));\n    }\n  }, [dispatch, address, chain]);\n\n  const nativeCurrency = assets.find((asset: IAssetData) => asset.id === 0)!;\n\n  return (\n    <div className=\"site-layout-background site-header\">\n      <div className=\"site-header-inner\">\n        <div>\n          <span>Connected to </span>\n          <Select\n            value={chain}\n            onChange={(event) => dispatch(switchChain(event.target.value as ChainType))}\n          >\n            <option value={ChainType.TestNet}>Testnet</option>\n            <option value={ChainType.MainNet}>Mainnet</option>\n          </Select>\n        </div>\n        {!address ? (\n          <Button onClick={() => dispatch(setIsModalOpen(true))}>Connect Wallet</Button>\n        ) : (\n          <div className=\"header-address-info\">\n            {!loading && (\n              <span>\n                {formatBigNumWithDecimals(nativeCurrency.amount, nativeCurrency.decimals)}{\" \"}\n                {nativeCurrency.unitName || \"units\"}\n              </span>\n            )}\n            <span className=\"header-account\">{ellipseAddress(address)}</span>\n            <Button\n              className=\"disconnect-button\"\n              onClick={() => connector.killSession().catch((err) => console.error(err.message))}\n            >\n              Disconnect\n            </Button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default SiteHeader;\n","import * as PropTypes from \"prop-types\";\n\nconst Icon = (props: any) => {\n  const { src, fallback } = props;\n  return (\n    <img\n      {...props}\n      src={src}\n      alt=\"icon\"\n      className=\"icon\"\n      onError={(event: any) => {\n        if (fallback) {\n          event.target.src = fallback;\n        }\n      }}\n    />\n  );\n};\n\nIcon.propTypes = {\n  src: PropTypes.string,\n  fallback: PropTypes.string,\n  size: PropTypes.number,\n};\n\nIcon.defaultProps = {\n  src: null,\n  fallback: \"\",\n  size: 20,\n};\n\nexport default Icon;\n","import * as PropTypes from \"prop-types\";\nimport Icon from \"./Icon\";\n\nconst ASAIcon = (props: { assetID: number }) => {\n  const src = `https://algoexplorer.io/images/assets/big/light/${props.assetID}.png`;\n  return <Icon src={src} />;\n};\n\nASAIcon.propTypes = {\n  assetID: PropTypes.number,\n};\n\nASAIcon.defaultProps = {\n  assetID: 0,\n};\n\nexport default ASAIcon;\n","export default __webpack_public_path__ + \"static/media/algo.ecbc85e5.svg\";","import Icon from \"./Icon\";\nimport ASAIcon from \"./ASAIcon\";\nimport algo from \"../assets/algo.svg\";\nimport { formatBigNumWithDecimals } from \"../helpers/utilities\";\nimport { IAssetData } from \"../helpers/types\";\n\nconst AssetRow = ({ asset }: { asset: IAssetData }) => (\n  <div className=\"asset-row\">\n    <div className=\"asset-info\">\n      {asset.id === 0 ? <Icon src={algo} /> : <ASAIcon assetID={asset.id} />}\n      <span>{asset.name}</span>\n    </div>\n    <div>\n      <div>\n        {`${formatBigNumWithDecimals(asset.amount as bigint, asset.decimals)} ${\n          asset.unitName || \"units\"\n        }`}\n      </div>\n    </div>\n  </div>\n);\n\nexport default AssetRow;\n","import AssetRow from \"./AssetRow\";\nimport { IAssetData } from \"../helpers/types\";\n\nconst AccountAssets = ({ assets }: { assets: IAssetData[] }) => {\n  const nativeCurrency = assets.find((asset) => asset.id === 0)!;\n  const tokens = assets.filter((asset) => asset.id !== 0);\n  return (\n    <div>\n      <h2>Account Balance</h2>\n      <AssetRow key={nativeCurrency.id} asset={nativeCurrency} />\n      {tokens.map((token) => (\n        <AssetRow key={token.id} asset={token} />\n      ))}\n    </div>\n  );\n};\n\nexport default AccountAssets;\n","import React from 'react';\n\nconst LoadingIcon: React.FC = () => {\n  return (\n    <div className=\"loading-icon\"><span></span></div>\n  )\n}\n\nexport default LoadingIcon;","import React from \"react\";\nimport { selectAssets } from \"../../features/walletConnectSlice\";\nimport { useAppSelector } from \"../../store/hooks\";\nimport AccountAssets from \"../AccountAssets\";\nimport LoadingIcon from \"../LoadingIcon\";\n\nconst SiteBody: React.FC = () => {\n  const loading = useAppSelector((state) => state.walletConnect.fetching);\n  const assets = useAppSelector(selectAssets);\n\n  return (\n    <div className=\"site-body\">\n      <div className=\"site-body-inner\">\n        {loading ? <LoadingIcon /> : <AccountAssets assets={assets} />}\n      </div>\n    </div>\n  );\n};\n\nexport default SiteBody;\n","export default __webpack_public_path__ + \"static/media/algorandwallet.37675b59.svg\";","import React, { useContext } from \"react\";\nimport { Button, Dialog } from \"evergreen-ui\";\nimport QRCodeModal from \"algorand-walletconnect-qrcode-modal\";\nimport \"./App.css\";\nimport SiteHeader from \"./components/SiteHeader\";\nimport { setIsModalOpen } from \"./features/applicationSlice\";\nimport SiteBody from \"./components/SiteBody\";\nimport algowallet from \"./assets/algorandwallet.svg\";\nimport { useAppDispatch, useAppSelector } from \"./store/hooks\";\nimport { ConnectContext } from \"./store/connector\";\n\nconst App: React.FC = () => {\n  const { isModalOpen } = useAppSelector((state) => state.application);\n  const dispatch = useAppDispatch();\n  const connector = useContext(ConnectContext);\n\n  const connect = async () => {\n    if (connector.connected) return;\n    if (connector.pending) return QRCodeModal.open(connector.uri, null);\n    await connector.createSession();\n  };\n\n  return (\n    <div>\n      <div className=\"site-layout\">\n        <SiteHeader />\n        <SiteBody />\n        <div className=\"footer\">\n          Made with 💖 by{\" \"}\n          <a href=\"https://github.com/fionnachan\" target=\"_blank\" rel=\"noreferrer\">\n            @fionnachan\n          </a>\n        </div>\n        <Dialog\n          isShown={isModalOpen}\n          title=\"Connect to a wallet\"\n          hasFooter={false}\n          onCloseComplete={() => dispatch(setIsModalOpen(false))}\n        >\n          <Button className=\"wallet-button\" onClick={connect}>\n            <img className=\"wallet-icon\" src={algowallet} alt=\"Algorand wallet\" />\n            <span>Algorand Wallet</span>\n          </Button>\n        </Dialog>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { Dispatch, Middleware, PayloadAction, SerializedError } from \"@reduxjs/toolkit\";\nimport { StoreGetSate } from \"../store\";\n\nconst logger: Middleware =\n  ({ getState }: { getState: StoreGetSate }) =>\n  (next: Dispatch) =>\n  (action: PayloadAction<any, string, any, SerializedError>) => {\n    if (action.type === \"walletConnect/switchChain\") {\n      console.log(\"switch chain: \", action.payload);\n    }\n    if (action.type === \"walletConnect/getAccountAssets/pending\") {\n      console.log(\"loading assets...\");\n    }\n    if (action.type === \"walletConnect/getAccountAssets/fulfilled\") {\n      console.log(\"assets sucessfully loaded\");\n    }\n    if (action.type === \"walletConnect/getAccountAssets/rejected\") {\n      console.error(action.error.message);\n    }\n\n    let result = next(action);\n    if (action.type === \"walletConnect/reset\") {\n      console.log(\"reset state\", getState().walletConnect);\n    }\n\n    return result;\n  };\n\nexport default logger;\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport walletConnectReducer from \"../features/walletConnectSlice\";\nimport applicationReducer from \"../features/applicationSlice\";\nimport logger from \"../features/logger\";\n\nconst store = configureStore({\n  reducer: {\n    walletConnect: walletConnectReducer,\n    application: applicationReducer,\n  },\n  preloadedState: {},\n  middleware: (getDefaultMiddleware) => getDefaultMiddleware().concat(logger),\n});\n\nexport type StoreGetSate = typeof store.getState;\nexport type RootState = ReturnType<StoreGetSate>;\nexport type AppDispatch = typeof store.dispatch;\n\nexport default store;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport store from \"./store\";\nimport { ConnectContext, connector } from \"./store/connector\";\n\nconst renderApp = () =>\n  ReactDOM.render(\n    <React.StrictMode>\n      <Provider store={store}>\n        <ConnectContext.Provider value={connector}>\n          <App />\n        </ConnectContext.Provider>\n      </Provider>\n    </React.StrictMode>,\n    document.getElementById(\"root\"),\n  );\n\nif (process.env.NODE_ENV !== \"production\" && (module as any).hot) {\n  (module as any).hot.accept(\"./App\", renderApp);\n}\n\nrenderApp();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}